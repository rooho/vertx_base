/*
 * This file is generated by jOOQ.
 */
package cc.phonecard.jooq.tables.daos;


import cc.phonecard.jooq.tables.Books;
import cc.phonecard.jooq.tables.records.BooksRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BooksDao extends AbstractVertxDAO<BooksRecord, cc.phonecard.jooq.tables.pojos.Books, Integer, Future<List<cc.phonecard.jooq.tables.pojos.Books>>, Future<cc.phonecard.jooq.tables.pojos.Books>, Future<Integer>, Future<Integer>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<BooksRecord,cc.phonecard.jooq.tables.pojos.Books,Integer> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public BooksDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(Books.BOOKS, cc.phonecard.jooq.tables.pojos.Books.class, new JDBCClassicQueryExecutor<BooksRecord,cc.phonecard.jooq.tables.pojos.Books,Integer>(configuration,cc.phonecard.jooq.tables.pojos.Books.class,vertx));
        }

        @Override
        protected Integer getId(cc.phonecard.jooq.tables.pojos.Books object) {
                return object.getId();
        }

        /**
     * Find records that have <code>channel_id IN (values)</code> asynchronously
     */
        public Future<List<cc.phonecard.jooq.tables.pojos.Books>> findManyByChannelId(Collection<Integer> values) {
                return findManyByCondition(Books.BOOKS.CHANNEL_ID.in(values));
        }

        /**
     * Find records that have <code>channel_id IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cc.phonecard.jooq.tables.pojos.Books>> findManyByChannelId(Collection<Integer> values, int limit) {
                return findManyByCondition(Books.BOOKS.CHANNEL_ID.in(values),limit);
        }

        /**
     * Find records that have <code>order_no IN (values)</code> asynchronously
     */
        public Future<List<cc.phonecard.jooq.tables.pojos.Books>> findManyByOrderNo(Collection<String> values) {
                return findManyByCondition(Books.BOOKS.ORDER_NO.in(values));
        }

        /**
     * Find records that have <code>order_no IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cc.phonecard.jooq.tables.pojos.Books>> findManyByOrderNo(Collection<String> values, int limit) {
                return findManyByCondition(Books.BOOKS.ORDER_NO.in(values),limit);
        }

        /**
     * Find records that have <code>phone_num IN (values)</code> asynchronously
     */
        public Future<List<cc.phonecard.jooq.tables.pojos.Books>> findManyByPhoneNum(Collection<String> values) {
                return findManyByCondition(Books.BOOKS.PHONE_NUM.in(values));
        }

        /**
     * Find records that have <code>phone_num IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cc.phonecard.jooq.tables.pojos.Books>> findManyByPhoneNum(Collection<String> values, int limit) {
                return findManyByCondition(Books.BOOKS.PHONE_NUM.in(values),limit);
        }

        /**
     * Find records that have <code>create_time IN (values)</code>
     * asynchronously
     */
        public Future<List<cc.phonecard.jooq.tables.pojos.Books>> findManyByCreateTime(Collection<String> values) {
                return findManyByCondition(Books.BOOKS.CREATE_TIME.in(values));
        }

        /**
     * Find records that have <code>create_time IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cc.phonecard.jooq.tables.pojos.Books>> findManyByCreateTime(Collection<String> values, int limit) {
                return findManyByCondition(Books.BOOKS.CREATE_TIME.in(values),limit);
        }

        /**
     * Find records that have <code>update_time IN (values)</code>
     * asynchronously
     */
        public Future<List<cc.phonecard.jooq.tables.pojos.Books>> findManyByUpdateTime(Collection<LocalDateTime> values) {
                return findManyByCondition(Books.BOOKS.UPDATE_TIME.in(values));
        }

        /**
     * Find records that have <code>update_time IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cc.phonecard.jooq.tables.pojos.Books>> findManyByUpdateTime(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(Books.BOOKS.UPDATE_TIME.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<BooksRecord,cc.phonecard.jooq.tables.pojos.Books,Integer> queryExecutor(){
                return (JDBCClassicQueryExecutor<BooksRecord,cc.phonecard.jooq.tables.pojos.Books,Integer>) super.queryExecutor();
        }
}
